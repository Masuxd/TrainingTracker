import 'dart:convert';
import 'dart:io';
import 'dart:html' as html; // Only imported for web
import 'package:flutter/material.dart';
import 'package:http/http.dart' as http;
import 'package:dio_cookie_manager/dio_cookie_manager.dart';
import 'package:cookie_jar/cookie_jar.dart';
import 'package:dio/dio.dart';

class AuthService {
  static const String baseUrl = 'https://localhost:3000/auth';
  /*
  final Dio _dio = Dio(BaseOptions(
    baseUrl: 'https://localhost:3000/auth',
    headers: {
      'Content-Type': 'application/json',
    },
  ));

  AuthService() {
    // Intercept requests to add cookies
    _dio.interceptors.add(InterceptorsWrapper(
      onRequest: (options, handler) async {
        // Load cookies and add them to the request headers
        final cookies = await CookieManager.instance.loadCookies('Set-Cookie');
        debugPrint("Request cookies: $cookies");
        if (cookies != null && cookies.isNotEmpty) {
          final cookieMap = jsonDecode(cookies) as Map<String, dynamic>;
          options.headers['Cookie'] = cookieMap.entries
              .map((entry) => '${entry.key}=${entry.value}')
              .join('; ');
        }
        debugPrint("Request headers: ${options.headers}");
        handler.next(options);
      },
      onResponse: (response, handler) async {
        // Check if the 'set-cookie' header is present in the response
        debugPrint("Response headers:");
        response.headers.forEach((name, values) {
          debugPrint('$name: $values');
        });
        if (response.headers.map.containsKey('Set-Cookie')) {
          final rawCookies = response.headers['Set-Cookie'] ?? [];
          debugPrint("response headers: $rawCookies");
          await CookieManager.instance
              .saveCookies(rawCookies.join('; '), 'Set-Cookie');
        }
        debugPrint("Response status code: ${response.statusCode}");
        debugPrint("Response data: ${response.data}");
        handler.next(response);
      },
      onError: (DioException e, handler) {
        debugPrint("Error: ${e.message}");
        debugPrint("Error response: ${e.response}");
        handler.next(e);
      },
    ));
  }
  

  Future<bool> login(String username, String password) async {
    try {
      // Make the POST request to the login endpoint
      final response = await _dio.post(
        '/login',
        data: {
          'username': username,
          'password': password,
        },
      );

      if (response.statusCode == 200) {
        print("Login successful.");
        return await fetchProtectedData();
      } else {
        print("Login failed with status: ${response.statusCode}");
        return false;
      }
    } catch (error) {
      print("An error occurred: $error");
      return false;
    }
  }

  Future<bool> register(String username, String email, String password) async {
    debugPrint('Registering user: $username, $email, $password');
    final response = await http.post(
      Uri.parse('$baseUrl/register'),
      headers: {'Content-Type': 'application/json'},
      body: jsonEncode(
          {'username': username, 'email': email, 'password': password}),
    );

    if (response.statusCode == 201) {
      // Automatically log in the user after successful registration
      return await login(email, password);
    } else {
      return false;
    }
  }

  Future<bool> fetchProtectedData() async {
    try {
      final response = await _dio.get('https:localhost:3000/exercise/');
      if (response.statusCode == 200) {
        print('Protected data fetched successfully.');
        return true;
      } else {
        print('Failed to fetch protected data.');
        return false;
      }
    } catch (error) {
      print('An error occurred while fetching protected data: $error');
      return false;
    }
  }
}*/

  Future<void> makeAuthenticatedRequest(String url) async {
    if (Platform.isAndroid || Platform.isIOS) {
      // Use Dio and CookieManager for mobile platforms
      await _makeAuthenticatedRequestMobile(url);
    } else {
      // Use HttpRequest with withCredentials for web
      await _makeAuthenticatedRequestWeb(url);
    }
  }

// Web-specific code
  Future<bool> _makeAuthenticatedRequestWeb(String url) async {
    // Make an HTTP request using `dart:html` for web
    final request = html.HttpRequest();
    request.open('GET', url);
    request.withCredentials = true; // Allow credentials to be sent
    request.send();

    if (request.status == 200) {
      print("Web Response: ${request.responseText}");
      return true;
    } else {
      print("Failed to authenticate on Web");
      return false;
    }
  }

// Mobile-specific code
  Future<void> _makeAuthenticatedRequestMobile(String url) async {
    // Create Dio instance and CookieManager for Android/iOS
    var dio = Dio();
    var cookieJar = CookieJar(); // Persistent storage can be used here

    // Add CookieManager to Dio's interceptor for handling cookies
    dio.interceptors.add(CookieManager(cookieJar));

    try {
      // Make a GET request to set the initial cookies
      Response response = await dio.get(url);
      print("Mobile Response: ${response.data}");

      // You can check stored cookies if needed
      List<Cookie> cookies = await cookieJar.loadForRequest(Uri.parse(url));
      for (var cookie in cookies) {
        print("Stored cookie: ${cookie.name}=${cookie.value}");
      }
    } catch (e) {
      print("Failed to authenticate on Mobile: $e");
    }
  }
}
